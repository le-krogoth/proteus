/*-----------------------------------------------------------------------------
 **
 ** - Proteus -
 **
 ** Copyright 2018 by Krogoth and the contributing authors
 **
 ** This program is free software; you can redistribute it and/or modify it
 ** under the terms of the GNU Affero General Public License as published by the
 ** Free Software Foundation, either version 3 of the License, or (at your option)
 ** any later version.
 **
 ** This program is distributed in the hope that it will be useful, but WITHOUT
 ** ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ** FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License
 ** for more details.
 **
 ** You should have received a copy of the GNU Affero General Public License
 ** along with this program. If not, see <http://www.gnu.org/licenses/>.
 **
 ** -----------------------------------------------------------------------------*/
#ifndef displaymanager_h
#define displaymanager_h

#include <SPI.h>
#include <Print.h>
#include <limits.h>
#include <U8g2lib.h>
#include <Arduino.h>
#include "ModeManager.h"

#define INVERT 2 //< lit/unlit pixel
#define WHITE 1 //< lit pixel
#define BLACK 0 //< unlit pixel

//Area41 125 x 32
static const unsigned char area41logo[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0xFF,
        0xFF, 0x07, 0xF8, 0xFF, 0x3F, 0x00, 0x0C, 0x00, 0x06, 0x00, 0x8E, 0x0F,
        0x00, 0x1E, 0x00, 0xFF, 0xFF, 0x0F, 0xFC, 0xFF, 0x3F, 0x00, 0x1E, 0x00,
        0x0E, 0x00, 0x8E, 0x1F, 0x00, 0x3F, 0x00, 0xFF, 0xFF, 0x1F, 0xFE, 0xFF,
        0x3F, 0x00, 0x3F, 0x00, 0x0E, 0x00, 0x8E, 0x1F, 0x80, 0x7F, 0x00, 0x00,
        0x00, 0x3C, 0x0F, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x0E, 0x00, 0x0E, 0x1C,
        0xC0, 0xFF, 0x00, 0x00, 0x00, 0x38, 0x07, 0x00, 0x00, 0xC0, 0xFF, 0x00,
        0x0E, 0x00, 0x0E, 0x1C, 0xE0, 0xF3, 0x01, 0x00, 0x00, 0x3C, 0xC7, 0xFF,
        0x1F, 0xE0, 0xF3, 0x01, 0x0E, 0x00, 0x0E, 0x1C, 0xF0, 0xE1, 0x03, 0xF8,
        0xFF, 0x3F, 0xE7, 0xFF, 0x3F, 0xF0, 0xE1, 0x03, 0x0E, 0x00, 0x0E, 0x1C,
        0xF8, 0xC0, 0x07, 0xFC, 0xFF, 0x1F, 0xE7, 0xFF, 0x3F, 0xF8, 0xC0, 0x07,
        0x0E, 0x00, 0x0E, 0x1C, 0x7C, 0x80, 0x0F, 0xFE, 0xFF, 0x0F, 0xC7, 0xFF,
        0x1F, 0x7C, 0x80, 0x0F, 0xFE, 0xFF, 0x0F, 0x1C, 0x3E, 0x00, 0x1F, 0x0F,
        0x80, 0x07, 0x07, 0x00, 0x00, 0x3E, 0x00, 0x1F, 0xFC, 0xFF, 0x0F, 0x1C,
        0x1F, 0x0C, 0x3E, 0x07, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x1F, 0x0C, 0x3E,
        0xF8, 0xFF, 0x0F, 0x1C, 0x0F, 0x1E, 0x3C, 0x07, 0x00, 0x1E, 0xFE, 0xFF,
        0x3F, 0x0F, 0x1E, 0x3C, 0x00, 0x00, 0x0E, 0x1C, 0x07, 0x1E, 0x38, 0x07,
        0x00, 0x3C, 0xFC, 0xFF, 0x3F, 0x07, 0x1E, 0x38, 0x00, 0x00, 0x0E, 0x1C,
        0x03, 0x0C, 0x30, 0x07, 0x00, 0x38, 0xF8, 0xFF, 0x3F, 0x03, 0x0C, 0x30,
        0x00, 0x00, 0x0E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

class DisplayManager
{
public:
    DisplayManager(ModeManager* const m, U8G2_SSD1306_128X32_UNIVISION_F_SW_I2C* const lib, HardwareSerial* const hws);

    /// Initializes the hardware
    void begin();

    /// Scrolls in the Arduboy logo
    void showBootLogo();

    void setFrameRate(uint8_t rate);
    bool nextFrame();
    bool everyXFrames(uint8_t frames);

    void handleFrame();

    uint8_t frameRate;
    uint16_t frameCount;
    uint8_t eachFrameMillis;
    long lastFrameStart;
    long nextFrameStart;
    bool post_render;
    uint8_t lastFrameDurationMs;

protected:

private:
    ModeManager* mm;

    U8G2_SSD1306_128X32_UNIVISION_F_SW_I2C* u8g2;
    HardwareSerial* hs;
};

#endif
