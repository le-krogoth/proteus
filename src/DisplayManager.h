/*-----------------------------------------------------------------------------
 **
 ** - Proteus -
 **
 ** Copyright 2018 by Krogoth and the contributing authors
 **
 ** This program is free software; you can redistribute it and/or modify it
 ** under the terms of the GNU Affero General Public License as published by the
 ** Free Software Foundation, either version 3 of the License, or (at your option)
 ** any later version.
 **
 ** This program is distributed in the hope that it will be useful, but WITHOUT
 ** ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ** FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License
 ** for more details.
 **
 ** You should have received a copy of the GNU Affero General Public License
 ** along with this program. If not, see <http://www.gnu.org/licenses/>.
 **
 ** -----------------------------------------------------------------------------*/
#ifndef displaymanager_h
#define displaymanager_h

#include <SPI.h>
#include <Print.h>
#include <limits.h>
#include <U8g2lib.h>
#include <Arduino.h>

#define INVERT 2 //< lit/unlit pixel
#define WHITE 1 //< lit pixel
#define BLACK 0 //< unlit pixel

//Area41 125 x 32
static const unsigned char area41logo[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0xFF,
        0xFF, 0x07, 0xF8, 0xFF, 0x3F, 0x00, 0x0C, 0x00, 0x06, 0x00, 0x8E, 0x0F,
        0x00, 0x1E, 0x00, 0xFF, 0xFF, 0x0F, 0xFC, 0xFF, 0x3F, 0x00, 0x1E, 0x00,
        0x0E, 0x00, 0x8E, 0x1F, 0x00, 0x3F, 0x00, 0xFF, 0xFF, 0x1F, 0xFE, 0xFF,
        0x3F, 0x00, 0x3F, 0x00, 0x0E, 0x00, 0x8E, 0x1F, 0x80, 0x7F, 0x00, 0x00,
        0x00, 0x3C, 0x0F, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x0E, 0x00, 0x0E, 0x1C,
        0xC0, 0xFF, 0x00, 0x00, 0x00, 0x38, 0x07, 0x00, 0x00, 0xC0, 0xFF, 0x00,
        0x0E, 0x00, 0x0E, 0x1C, 0xE0, 0xF3, 0x01, 0x00, 0x00, 0x3C, 0xC7, 0xFF,
        0x1F, 0xE0, 0xF3, 0x01, 0x0E, 0x00, 0x0E, 0x1C, 0xF0, 0xE1, 0x03, 0xF8,
        0xFF, 0x3F, 0xE7, 0xFF, 0x3F, 0xF0, 0xE1, 0x03, 0x0E, 0x00, 0x0E, 0x1C,
        0xF8, 0xC0, 0x07, 0xFC, 0xFF, 0x1F, 0xE7, 0xFF, 0x3F, 0xF8, 0xC0, 0x07,
        0x0E, 0x00, 0x0E, 0x1C, 0x7C, 0x80, 0x0F, 0xFE, 0xFF, 0x0F, 0xC7, 0xFF,
        0x1F, 0x7C, 0x80, 0x0F, 0xFE, 0xFF, 0x0F, 0x1C, 0x3E, 0x00, 0x1F, 0x0F,
        0x80, 0x07, 0x07, 0x00, 0x00, 0x3E, 0x00, 0x1F, 0xFC, 0xFF, 0x0F, 0x1C,
        0x1F, 0x0C, 0x3E, 0x07, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x1F, 0x0C, 0x3E,
        0xF8, 0xFF, 0x0F, 0x1C, 0x0F, 0x1E, 0x3C, 0x07, 0x00, 0x1E, 0xFE, 0xFF,
        0x3F, 0x0F, 0x1E, 0x3C, 0x00, 0x00, 0x0E, 0x1C, 0x07, 0x1E, 0x38, 0x07,
        0x00, 0x3C, 0xFC, 0xFF, 0x3F, 0x07, 0x1E, 0x38, 0x00, 0x00, 0x0E, 0x1C,
        0x03, 0x0C, 0x30, 0x07, 0x00, 0x38, 0xF8, 0xFF, 0x3F, 0x03, 0x0C, 0x30,
        0x00, 0x00, 0x0E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const byte spriteUnicorn_0[]  = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x8, 0x7c, 0x1c, 0x1c, 0x1e, 0x7f, 0x2, 0x3, 0x3, 0x00, 0x00, 0x00,
};
const byte spriteUnicorn_1[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x20, 0x30, 0x10, 0x38, 0x78, 0x38, 0x38, 0x38, 0x7c, 0x3e, 0x5, 0x6, 0x6, 0x00, 0x00,
};
const byte spriteUnicorn_2[]  = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xe0, 0x50, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2, 0x3, 0x1, 0xf, 0x3, 0x3, 0x3, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
const byte spriteUnicornMask_0[]  = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xa0, 0xd0, 0x20, 0x00, 0x00, 0x00, 0x10, 0x28, 0x24, 0x74, 0x82, 0x62, 0x22, 0x61, 0x80, 0x7d, 0x4, 0x4, 0x3, 0x00, 0x00,
};
const byte spriteUnicornMask_1[]  = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xa0, 0x40, 0x00, 0x20, 0x50, 0x48, 0x28, 0x44, 0x84, 0x44, 0x44, 0x44, 0x82, 0x41, 0x3a, 0x9, 0x9, 0x6, 0x00,
};
const byte spriteUnicornMask_2[]  = {
        0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x40, 0x20, 0x10, 0xa8, 0x94, 0x9a, 0x64, 0x00, 0x00, 0x00, 0x2, 0x5, 0x4, 0xe, 0x10, 0xc, 0x4, 0xc, 0x10, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00,
};
//const byte *animationFramesUnicorn[] = { spriteUnicorn_0, spriteUnicorn_1, spriteUnicorn_2 };
//const byte *animationFramesUnicornMask[] = { spriteUnicornMask_0, spriteUnicornMask_1, spriteUnicornMask_2 };

class DisplayManager
{
public:
    DisplayManager(U8G2_SSD1306_128X32_UNIVISION_F_SW_I2C* const lib, HardwareSerial* const hs);

    /// Initializes the hardware
    void begin();

    /// Scrolls in the Arduboy logo
    void showBootLogo();

    /// Clears display.
    void clear();

    /// Sets a single pixel on the screen buffer to white or black.
    void drawPixel(int x, int y, uint8_t color);

    //uint8_t getPixel(uint8_t x, uint8_t y);

    /// Draw a circle of a defined radius.
    void drawCircle(int16_t x0, int16_t y0, uint8_t r, uint8_t color);

    /// Draws a filled-in circle.
    void fillCircle(int16_t x0, int16_t y0, uint8_t r, uint8_t color);

    /// Draws a line between two points.
    void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t color);

    /// Draws a rectangle of a width and height.
    void drawRect(int16_t x, int16_t y, uint8_t w, uint8_t h, uint8_t color);

    /// Draws a filled-in rectangle.
    void fillRect(int16_t x, int16_t y, uint8_t w, uint8_t h, uint8_t color);

    /// Fills the screen with white or black.
    void fillScreen(uint8_t color);

    /// Draws a rectangle with rounded edges.
    void drawRoundRect(int16_t x, int16_t y, uint8_t w, uint8_t h, uint8_t r, uint8_t color);

    /// Draws a filled-in rectangle with rounded edges.
    void fillRoundRect(int16_t x, int16_t y, uint8_t w, uint8_t h, uint8_t r, uint8_t color);

    /// Draws the outline of a triangle.
    void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color);

    /// Draws a filled-in triangle.
    void fillTriangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color);

    /// Draws a bitmap from program memory to a specific X/Y
    void drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color);

    /// Draws an ASCII character at a point.
    void drawChar(int16_t x, int16_t y, unsigned char c, uint8_t color, uint8_t bg, uint8_t size);


    void setFrameRate(uint8_t rate);
    bool nextFrame();
    bool everyXFrames(uint8_t frames);

    void handleScreen();

    uint8_t frameRate;
    uint16_t frameCount;
    uint8_t eachFrameMillis;
    long lastFrameStart;
    long nextFrameStart;
    bool post_render;
    uint8_t lastFrameDurationMs;

    // sinus
    int i = 0;
    float d = 0.0;
    int c = 129;


    U8G2_SSD1306_128X32_UNIVISION_F_SW_I2C* u8g2;
    HardwareSerial* s;

protected:


// Adafruit stuff
protected:

};

#endif
